pipeline {
    agent any

    environment {
        GIT_REPO = 'https://github.com/Dhanush19B61A0550/splunk-terracecopilot.git'
        GIT_USER = 'Dhanush19B61A0550'
        PYTHON_PATH = 'C:\\Users\\MTL1027\\AppData\\Local\\Programs\\Python\\Python312\\python.exe'  // Updated to the correct Python path on Windows
    }

    options {
        ansiColor('xterm')  // Enable color output in Jenkins console
    }

    stages {
        stage('Clone GitHub Repo') {
            steps {
                echo 'Cloning your GitHub repository...'
                git branch: 'main', url: "${GIT_REPO}"
            }
        }

        stage('Check for Config Changes') {
            steps {
                script {
                    echo 'Checking for changes in configuration files...'
                    def configChanges = bat(script: 'git status --porcelain configs/', returnStdout: true).trim()
                    echo "Git Status Output: ${configChanges}"

                    if (configChanges) {
                        echo 'Detected changes in config files. Preparing to commit.'
                        env.CONFIG_CHANGED = 'true'
                    } else {
                        echo 'No changes detected in config files.'
                        env.CONFIG_CHANGED = 'false'
                    }
                }
            }
        }

        stage('Commit and Push Config Changes') {
            when {
                expression { env.CONFIG_CHANGED == 'true' }
            }
            steps {
                echo 'Committing and pushing config changes...'
                withCredentials([string(credentialsId: 'GIT_PASS', variable: 'GIT_TOKEN')]) {
                    bat """
                        git config --global user.name "jenkins-bot"
                        git config --global user.email "jenkins@example.com"
                        git add configs/inputs.conf configs/outputs.conf
                        git commit -m "Update configs from local changes"
                        git push https://${GIT_USER}:${GIT_TOKEN}@github.com/Dhanush19B61A0550/splunk-terracecopilot.git HEAD:main
                    """
                }
            }
        }

        stage('Run Config Analysis') {
            steps {
                echo 'Running configuration analysis...'
                ansiColor('xterm') {
                    bat """
                        if exist analysis_output rd /s /q analysis_output
                        mkdir analysis_output
                        "${PYTHON_PATH}" jenkins\\analyze_configs.py configs\\inputs.conf > analysis_output\\inputs_suggestions.txt
                        "${PYTHON_PATH}" jenkins\\analyze_configs.py configs\\outputs.conf > analysis_output\\outputs_suggestions.txt
                    """
                }
            }
        }

        stage('Display Suggestions') {
            steps {
                echo 'Displaying analysis suggestions...'
                ansiColor('xterm') {
                    bat """
                        echo -----------------------
                        echo Inputs.conf Suggestions:
                        type analysis_output\\inputs_suggestions.txt
                        echo -----------------------
                        echo Outputs.conf Suggestions:
                        type analysis_output\\outputs_suggestions.txt
                        echo -----------------------
                    """
                }
            }
        }

        stage('Check for Suggestion Changes') {
            steps {
                script {
                    echo 'Checking for changes in suggestion files...'
                    def suggestionChanges = bat(script: 'git status --porcelain analysis_output/', returnStdout: true).trim()
                    if (suggestionChanges) {
                        echo 'Detected changes in suggestions. Preparing to commit.'
                        env.SUGGESTIONS_CHANGED = 'true'
                    } else {
                        echo 'No changes detected in suggestions.'
                        env.SUGGESTIONS_CHANGED = 'false'
                    }
                }
            }
        }

        stage('Commit and Push Suggestions') {
            when {
                expression { env.SUGGESTIONS_CHANGED == 'true' }
            }
            steps {
                echo 'Committing and pushing suggestion changes...'
                withCredentials([string(credentialsId: 'GIT_PASS', variable: 'GIT_TOKEN')]) {
                    bat """
                        git add analysis_output
                        git commit -m "Update configuration analysis suggestions"
                        git push https://${GIT_USER}:${GIT_TOKEN}@github.com/Dhanush19B61A0550/splunk-terracecopilot.git HEAD:main
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed!'
        }

        success {
            echo 'Pipeline executed successfully!'
        }

        failure {
            echo 'Pipeline failed, please check the logs for details.'
        }
    }
}
